{"version":3,"file":"static/js/115.813d7c77.chunk.js","mappings":"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","sources":["api/api.js","components/MovieDetails/MovieDetails.styled.jsx","components/MovieDetails/MovieDetails.jsx","components/MovieList/MovieList.jsx","components/Movies/Movies.jsx"],"sourcesContent":["export const getTrendingMovies = async () => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    throw new Error('Failed to fetch trending movies');\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw new Error('Failed to fetch movie details');\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data.cast;\n  } catch (error) {\n    throw new Error('Failed to fetch movie cast');\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data.cast;\n  } catch (error) {\n    throw new Error('Failed to fetch movie credits');\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    throw new Error('Failed to fetch movie reviews');\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=104cb1f11a5d6d55ba8d6504d9bd060a&query=${encodeURIComponent(\n        query\n      )}`\n    );\n    if (!response.ok) {\n      throw new Error('Failed to search movies');\n    }\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    throw new Error('Failed to search movies');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const MovieDetailsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`;\n\nexport const MovieInfoContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  margin-bottom: 20px;\n`;\n\nexport const Poster = styled.div`\n  img {\n    width: 300px;\n    height: auto;\n    margin-right: 20px;\n  }\n`;\n\nexport const Details = styled.div`\n  text-align: left;\n`;\n\nexport const CastContainer = styled.div`\n  margin-top: 20px;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  list-style: none;\n  padding: 0;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 10px;\n  text-align: center;\n`;\n\nexport const CastImage = styled.img`\n  width: 200px;\n  height: auto;\n`;\n\nexport const Button = styled.button`\n  margin-top: 20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n} from '../../api/api';\nimport {\n  MovieDetailsContainer,\n  MovieInfoContainer,\n  Details,\n  Poster,\n  CastContainer,\n  CastList,\n  CastItem,\n  CastImage,\n  Button,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n  const [movie, setMovie] = useState(null);\n  const [credits, setCredits] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const [showCast, setShowCast] = useState(false);\n  const [showReviews, setShowReviews] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const movieData = await getMovieDetails(movieId);\n        setMovie(movieData);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n      }\n    };\n\n    fetchMovieData();\n  }, [movieId]);\n\n  const handleToggleCast = async () => {\n    if (!showCast) {\n      try {\n        const creditsData = await getMovieCredits(movieId);\n        setCredits(creditsData);\n      } catch (error) {\n        console.error('Error fetching movie credits:', error);\n      }\n    }\n\n    setShowCast(!showCast);\n  };\n\n  const handleToggleReviews = async () => {\n    if (!showReviews) {\n      try {\n        const reviewsData = await getMovieReviews(movieId);\n        setReviews(reviewsData);\n      } catch (error) {\n        console.error('Error fetching movie reviews:', error);\n      }\n    }\n\n    setShowReviews(!showReviews);\n  };\n\n  const handleGoBack = () => {\n    navigate(-1);\n  };\n\n  if (!movie) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <MovieDetailsContainer>\n      <button onClick={handleGoBack}>Go Back</button>\n      <h2>{movie.title}</h2>\n      <MovieInfoContainer>\n        <Poster>\n          <img\n            src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n            alt={movie.title}\n          />\n        </Poster>\n        <Details>\n          <p>Release Date: {movie.release_date}</p>\n          <p>Overview: {movie.overview}</p>\n        </Details>\n      </MovieInfoContainer>\n      <Button onClick={handleToggleCast}>\n        {showCast ? 'Hide Cast' : 'Show Cast'}\n      </Button>\n\n      {showCast && (\n        <div>\n          <CastContainer>\n            <h3>Cast</h3>\n            <CastList>\n              {credits.map(castMember => (\n                <CastItem key={castMember.id}>\n                  <CastImage\n                    src={`https://image.tmdb.org/t/p/w200${castMember.profile_path}`}\n                    alt={castMember.name}\n                  />\n                  {castMember.name}\n                </CastItem>\n              ))}\n            </CastList>\n          </CastContainer>\n        </div>\n      )}\n\n      <Button onClick={handleToggleReviews}>\n        {showReviews ? 'Hide Reviews' : 'Show Reviews'}\n      </Button>\n\n      {showReviews && (\n        <div>\n          <h3>Reviews</h3>\n          <ul>\n            {reviews.map(review => (\n              <li key={review.id}>\n                <p>Author: {review.author}</p>\n                <p>{review.content}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </MovieDetailsContainer>\n  );\n};\n\nexport default MovieDetails;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst MovieList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { searchMovies } from '../../api/api';\nimport MovieList from '../MovieList/MovieList';\nimport MovieDetails from '../MovieDetails/MovieDetails';\n\nconst Movies = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedMovieId, setSelectedMovieId] = useState(null);\n  const [prevSearchQuery, setPrevSearchQuery] = useState('');\n  const [error, setError] = useState(null);\n\n  const fetchSearchedMovies = useCallback(async () => {\n    try {\n      const searchedMovies = await searchMovies(searchQuery);\n      setMovies(searchedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n  }, [searchQuery]);\n\n  const handleSearch = useCallback(() => {\n    navigate(\n      `/goit-react-hw-05-movies/movies?search=${encodeURIComponent(\n        searchQuery\n      )}`\n    );\n  }, [navigate, searchQuery]);\n\n  const handleSelectMovie = useCallback(\n    movieId => {\n      setSelectedMovieId(movieId);\n      navigate(`/goit-react-hw-05-movies/movies/${movieId}`);\n    },\n    [navigate]\n  );\n\n  const handleBack = useCallback(() => {\n    setSelectedMovieId(null);\n    setSearchQuery(prevSearchQuery);\n    navigate('../'); // or navigate('/goit-react-hw-05-movies/movies')\n  }, [prevSearchQuery, navigate]);\n\n  useEffect(() => {\n    const searchParam = new URLSearchParams(location.search).get('search');\n    if (searchParam) {\n      setSearchQuery(searchParam);\n      setPrevSearchQuery(searchParam);\n    }\n  }, [location.search]);\n\n  useEffect(() => {\n    if (searchQuery !== '') {\n      fetchSearchedMovies();\n    }\n  }, [searchQuery, fetchSearchedMovies]);\n\n  useEffect(() => {\n    const movieId = location.pathname.split('/').pop();\n    if (movieId && !isNaN(movieId)) {\n      setSelectedMovieId(parseInt(movieId));\n    }\n  }, [location.pathname]);\n\n  if (error) {\n    return <div>Помилка: {error}</div>;\n  }\n\n  if (selectedMovieId) {\n    const selectedMovie = movies.find(movie => movie.id === selectedMovieId);\n    return (\n      <div>\n        <button onClick={handleBack}>Назад</button>\n        <MovieDetails movie={selectedMovie} />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h2>Фільми</h2>\n      <MovieList movies={movies} onSelectMovie={handleSelectMovie} />\n      <div>\n        <input\n          type=\"text\"\n          value={searchQuery}\n          onChange={e => setSearchQuery(e.target.value)}\n        />\n        <button onClick={handleSearch}>Пошук</button>\n      </div>\n    </div>\n  );\n};\nexport default Movies;\n"],"names":["getTrendingMovies","fetch","response","json","data","results","Error","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","searchMovies","query","encodeURIComponent","ok","MovieDetailsContainer","styled","MovieInfoContainer","Poster","Details","CastContainer","CastList","CastItem","CastImage","Button","useParams","navigate","useNavigate","useState","movie","setMovie","credits","setCredits","reviews","setReviews","showCast","setShowCast","showReviews","setShowReviews","useEffect","fetchMovieData","movieData","console","error","handleToggleCast","creditsData","handleToggleReviews","reviewsData","onClick","title","src","poster_path","alt","release_date","overview","map","castMember","profile_path","name","id","review","author","content","movies","to","location","useLocation","setMovies","searchQuery","setSearchQuery","selectedMovieId","setSelectedMovieId","prevSearchQuery","setPrevSearchQuery","setError","fetchSearchedMovies","useCallback","searchedMovies","message","handleSearch","handleSelectMovie","handleBack","searchParam","URLSearchParams","search","get","pathname","split","pop","isNaN","parseInt","selectedMovie","find","onSelectMovie","type","value","onChange","e","target"],"sourceRoot":""}