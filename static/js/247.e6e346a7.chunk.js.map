{"version":3,"file":"static/js/247.e6e346a7.chunk.js","mappings":"8QAAaA,EAAiB,mCAAG,+GAENC,MAAM,4FAFA,cAEvBC,EAFuB,gBAKVA,EAASC,OALC,cAKvBC,EALuB,yBAMtBA,EAAKC,SANiB,wCAQvB,IAAIC,MAAM,mCARa,0DAAH,qDAYjBC,EAAe,mCAAG,WAAMC,GAAN,kGAEJP,MAAM,sCAAD,OACYO,EADZ,8CAFD,cAErBN,EAFqB,gBAKRA,EAASC,OALD,cAKrBC,EALqB,yBAMpBA,GANoB,wCAQrB,IAAIE,MAAM,iCARW,0DAAH,sDAwBfG,EAAe,mCAAG,WAAMD,GAAN,kGAEJP,MAAM,sCAAD,OACYO,EADZ,sDAFD,cAErBN,EAFqB,gBAKRA,EAASC,OALD,cAKrBC,EALqB,yBAMpBA,EAAKM,MANe,wCAQrB,IAAIJ,MAAM,iCARW,0DAAH,sDAYfK,EAAe,mCAAG,WAAMH,GAAN,kGAEJP,MAAM,sCAAD,OACYO,EADZ,sDAFD,cAErBN,EAFqB,gBAKRA,EAASC,OALD,cAKrBC,EALqB,yBAMpBA,EAAKC,SANe,wCAQrB,IAAIC,MAAM,iCARW,0DAAH,qD,yGCU5B,UAtDa,WACX,IAAQE,GAAYI,EAAAA,EAAAA,MAAZJ,QACR,GAA0BK,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,mHAE6BC,QAAQC,IAAI,EACrDd,EAAAA,EAAAA,IAAgBC,IAChBC,EAAAA,EAAAA,IAAgBD,KAJJ,+BAEPc,EAFO,KAEOC,EAFP,KAMdR,EAASO,GACTL,EAAWM,GAPG,kDASdC,QAAQC,MAAM,6BAAd,MATc,0DAAH,qDAafN,GACD,GAAE,CAACX,IAECM,GAKH,4BACE,wBAAKA,EAAMY,SACX,gBACEC,IAAG,yCAAoCb,EAAMc,aAC7CC,IAAKf,EAAMY,SAEb,2CACA,uBAAIZ,EAAMgB,YACV,0CAAkBhB,EAAMiB,iBACxB,0CAAkBjB,EAAMkB,iBAExB,kCACA,wBACGhB,EAAQiB,KAAI,SAAAC,GAAU,OACrB,2BACE,gBACEP,IAAG,yCAAoCO,EAAWC,cAClDN,IAAKK,EAAWE,OAEjBF,EAAWE,OALLF,EAAWG,GADC,UAjBpB,uCA6BV,C,sBCxDD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOtB,GAEP,YADAgB,EAAOhB,EAET,CACIqB,EAAKE,KACPR,EAAQO,GAER3B,QAAQoB,QAAQO,GAAOE,KAAKP,EAAOC,EAEvC,CACe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAInC,SAAQ,SAAUoB,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GACzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CACAf,OAAMgB,EACR,GACF,CACF,C","sources":["api/api.js","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export const getTrendingMovies = async () => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    throw new Error('Failed to fetch trending movies');\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw new Error('Failed to fetch movie details');\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data.cast;\n  } catch (error) {\n    throw new Error('Failed to fetch movie cast');\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data.cast;\n  } catch (error) {\n    throw new Error('Failed to fetch movie credits');\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=104cb1f11a5d6d55ba8d6504d9bd060a`\n    );\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    throw new Error('Failed to fetch movie reviews');\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails, getMovieCredits } from '../../api/api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [credits, setCredits] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [movieDetails, movieCredits] = await Promise.all([\n          getMovieDetails(movieId),\n          getMovieCredits(movieId),\n        ]);\n        setMovie(movieDetails);\n        setCredits(movieCredits);\n      } catch (error) {\n        console.error('Error fetching movie data:', error);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  if (!movie) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h2>{movie.title}</h2>\n      <img\n        src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n        alt={movie.title}\n      />\n      <h3>Movie Details</h3>\n      <p>{movie.overview}</p>\n      <p>Release Date: {movie.release_date}</p>\n      <p>Vote Average: {movie.vote_average}</p>\n\n      <h3>Cast</h3>\n      <ul>\n        {credits.map(castMember => (\n          <li key={castMember.id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w200${castMember.profile_path}`}\n              alt={castMember.name}\n            />\n            {castMember.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["getTrendingMovies","fetch","response","json","data","results","Error","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","useParams","useState","movie","setMovie","credits","setCredits","useEffect","fetchData","Promise","all","movieDetails","movieCredits","console","error","title","src","poster_path","alt","overview","release_date","vote_average","map","castMember","profile_path","name","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}